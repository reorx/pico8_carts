pico-8 cartridge // http://www.pico-8.com
version 16
__lua__
-- dodge

-- TODO
-- [ ] add flying heart (add life, max 5, more become score)
-- [ ] add flying bonus (add score)
-- [ ] add flying clock (reduce heat)
-- [ ] add heat bar (heat increases over time, the greater heat, the more bullets)
-- [ ] add dying animation
-- [ ] prettify game over, add option for restart

-- for any given point on the
-- map, true if there is wall
-- there.
function is_point_solid(tx, ty)
    -- grab the cell value
    local v = mget(tx, ty)

    -- check if flag 1 is set (the
    -- orange toggle button in the 
    -- sprite editor)
    return fget(v, 1)
end

function is_nearby_solid(tx, ty, w, h)
    return
        is_point_solid(tx,ty) or
        is_point_solid(tx+w,ty) or
        is_point_solid(tx,ty+h) or
        is_point_solid(tx+w,ty+h)
end

-- define actor
actor_type = {}

function actor_type:new(tx, ty)
    local actor = {
        tx = tx,
        ty = ty,
        dx = 0,
        dy = 0,
        width = 1,
        height = 1,
        spr = 0,
        spr_w = 1,
        spr_h = 1,
        spr_flip_x = false,
        spr_flip_y = false,
        frame = 0,
        frames = 7,
        ticks_per_frame = 3,
        inertia = 0.8,
        moveunit = 0.06,
        tick = 0,
    }
    self.__index = self
    return setmetatable(actor, self)
end

function actor_type:update()
    self.tx += self.dx
    self.ty += self.dy
    if (self.tx > 16) self.tx = 16
    if (self.tx < -1) self.tx = -1
    if (self.ty > 16) self.ty = 16
    if (self.ty < -1) self.ty = -1

    -- frame
    self.frame = flr(self.tick / self.ticks_per_frame) % self.frames
    -- tick
    self.tick += 1
end

function actor_type:draw()
    local x = self.tx * 8
    local y = self.ty * 8
    spr(self.spr + self.frame, x, y, self.spr_w, self.spr_h, self.spr_flip_x, self.spr_flip_y)
end

cube_type = actor_type:new(0, 0)

function cube_type:init()
    self.spr = 2
    self.life = 3
    self.score = 0
    self.invincible = 0
    -- reduce 0.01 to make right/bottom side gap work properly
    self.width = 0.89
    self.height = 0.99
end

function cube_type:update()
    -- calculate dx, dy
    local _f = flr(self.tick / 2) % 2
    local moving = 0
    if btn(0) then
        self.dx -= self.moveunit
        self.spr = 8
        moving += 1
    end
    if btn(1) then
        self.dx += self.moveunit
        self.spr = 6
        moving += 1
    end
    if btn(2) then
        self.dy -= self.moveunit
        self.spr = 10
        moving += 1
    end
    if btn(3) then
        self.dy += self.moveunit
        self.spr = 4
        moving += 1
    end
    if moving == 0 then
        self.spr = 16
        _f = flr(self.tick / 5) % 4
    end
    self.frame = _f
    -- slow down double direction moving
    if moving > 1 then
        self.dx *= 0.8
        self.dy *= 0.8
    end

    -- update tx, ty
    -- determine wall
    if is_nearby_solid(self.tx+self.dx, self.ty, self.width, self.height) then
        self.dx *= -1
    else
        self.tx += self.dx
    end
    if is_nearby_solid(self.tx, self.ty+self.dy, self.width, self.height) then
        self.dy *= -1
    else
        self.ty += self.dy
    end

    -- inertia
    self.dx *= self.inertia
    self.dy *= self.inertia

    if self.tick % 30 == 0 then
        if (self.invincible > 0) self.invincible -= 1
        self.score += 1
    end

    -- tick
    self.tick += 1
end

-- called after `update()`
function cube_type:update_by_invincible()
    if self.invincible > 0 then
        self.spr = 1
        self.frame = flr(self.tick / 2) % 2
    end
end

function cube_type:colide_with_bullet(b)
    -- reduce bullet size from 8x8 to 7x7
    local bltx = b.tx + 0.125
    local blty = b.ty + b.height - 0.125
    local brtx = b.tx + b.width - 0.125
    local brty = b.ty + 0.125

    local cltx = cube.tx
    local clty = cube.ty + cube.height
    local crtx = cube.tx + cube.width
    local crty = cube.ty

    local is_collided = true
    if cltx > brtx or bltx > crtx then
        is_collided = false
    end
    if clty < brty or blty < crty then
        is_collided = false
    end

    if is_collided then
        self.invincible = 2
        self.life -= 1
        if self.life == 0 then
            game_over()
        end
    end
end

-- store all bullets
bullets = {}
bullet_spd = 0.2

function new_bullet(tx, ty)
    local b = actor_type:new(tx, ty)
    b.spr = 32
    b.frames = 3
    b.ticks_per_frame = 8
    return b
end

function random_bullet()
    local b = new_bullet(0, 0)
    -- get side
    local side = flr(rnd(4))
    if side == 0 then
        -- left
        b.tx = -1
        b.ty = flr(rnd(12)) + 1
        b.dx = bullet_spd
    elseif side == 1 then
        -- top
        b.spr = 35
        b.tx = flr(rnd(12)) + 1
        b.ty = -1
        b.dy = bullet_spd
        b.spr_flip_y = true
    elseif side == 2 then
        -- right
        b.tx = 15
        b.ty = flr(rnd(12)) + 1
        b.dx = -bullet_spd
        b.spr_flip_x = true
    elseif side == 3 then
        -- bottom
        b.spr = 35
        b.tx = flr(rnd(12)) + 1
        b.ty = 15
        b.dy = -bullet_spd
    end
    return b
end

panel_y0 = 111
panel_text_x0 = 8
panel_text_y0 = 117
panel_text_x1 = 75
function draw_panel()
    rectfill(0, panel_y0, 127, 127, 6)
    print("life:", panel_text_x0, panel_text_y0, 7)
    for i = 0, cube.life-1 do
        -- heart
        spr(64, 21+panel_text_x0+(i*10), 115)
    end

    print("score: "..cube.score, panel_text_x1, panel_text_y0, 7)
end

debugx= 2
debugy_end = 121
linesp = 8
debugcolor = 7
function dprint(s, index)
	print(s, debugx, debugy_end-linesp*index, debugcolor)
end

function debug()
	dprint("tx:"..cube.tx.." dx:"..cube.dx.." bullets:"..#bullets, 1)
	dprint("ty:"..cube.ty.." dy:"..cube.dy, 0)
end

is_game_over = false
function game_over()
    is_game_over = true
end

-- pico8 functions

function _init()
    cube = cube_type:new(7.5, 6.5)
    cube:init()
end

function _update()
    if is_game_over then
        return
    end

    cube:update()

    if (cube.tick / 10) % 1 == 0 then
        add(bullets, random_bullet())
    end
    for b in all(bullets) do
        b:update()
        if b.tx == 16 or b.ty == 16 or b.tx == -1 or b.ty == -1 then
            del(bullets, b)
        else
            if cube.invincible == 0 then
                cube:colide_with_bullet(b)
            end
        end
    end

    cube:update_by_invincible()
end

function _draw()
    cls()
    if is_game_over then
        print("game over")
        print("")
        print("score: "..cube.score)
        print("")
        print("thanks for playing :)")
        return
    end

    map(0,0,0,0,16,14)
    cube:draw()

    -- bullets
    for b in all(bullets) do
        b:draw()
    end

    -- panel
    draw_panel()

    -- debug()
end
__gfx__
00000000000cc000000cc00000000000000cc000070cc070070cc000000cc000000cc070000cc000000cc000000cc00000000000000000000000000000000000
0000000000cc7c0000c7cc000000000070cccc0700cccc0000cccc0070cccc0000cccc0000cccc0700cccc0000cccc0000000000000000000000000000000000
007007000ccc7cc00cc7ccc0000000000cc77cc00cc77cc00cccc7c00cccc7c00c7cccc00c7cccc00cc11cc00cc11cc000000000000000000000000000000000
0007700007777cc00cc77770000000000c7777c00c7777c001cc777001cc77700777cc100777cc100c1111c00c1111c000000000000000000000000000000000
000770000cc7777007777cc0000000000c7777c00c7777c001cc777001cc77700777cc100777cc100c1111c00c1111c000000000000000000000000000000000
007007000cc7ccc00ccc7cc0000000000cc77cc00cc77cc00cccc7c00cccc7c00c7cccc00c7cccc00cc11cc00cc11cc000000000000000000000000000000000
0000000000c7cc0000cc7c000000000000cccc0000cccc0000cccc0070cccc0000cccc0000cccc0770cccc0700cccc0000000000000000000000000000000000
00000000000cc000000cc00000000000000cc000000cc000070cc000000cc000000cc070000cc000000cc000070cc07000000000000000000000000000000000
000cc000000cc000000cc000000cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00cccc0000cccc0000cccc0000cccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0cccccc00cccccc00cccccc00cccccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0ccc7cc00cccccc00cccccc00cc7ccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0cccccc00ccc7cc00cc7ccc00cccccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0cccccc00cccccc00cccccc00cccccc0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00cccc0000cccc0000cccc0000cccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000cc000000cc000000cc000000cc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
ee8822008822ee0022ee88000022220000eeee000088880000000000000000000000000000000000000000000000000076666666777777777777777766666667
0ee8822008822ee0022ee880022882200ee22ee0088ee88000000000000000000000000000000000000000000000000076666666766666666666666766666667
00ee8822008822ee0022ee8822888822ee2222ee88eeee8800000000000000000000000000000000000000000000000076666666766666666666666766666667
000ee8820008822e00022ee8288ee882e228822e8ee22ee800000000000000000000000000000000000000000000000076666666766666666666666766666667
000ee8820008822e00022ee888eeee8822888822ee2222ee00000000000000000000000000000000000000000000000076666666766666666666666766666667
00ee8822008822ee0022ee888ee00ee828800882e220022e00000000000000000000000000000000000000000000000076666666766666666666666766666667
0ee8822008822ee0022ee880ee0000ee880000882200002200000000000000000000000000000000000000000000000076666666766666666666666766666667
ee8822008822ee0022ee8800e000000e800000082000000200000000000000000000000000000000000000000000000077777777766666666666666777777777
444999aaaa99944444444444aaaaaaaa44444444444999aa44444444aa9994440000000066666667777777777777777777777777777777777666666777777777
444999aaaa99944444444444aaaaaaaa44444444444999aa44444444aa9994440000000066666667766666667666666666666667766666677666666776666667
444999aaaa9994444444444499999999444444444449999944444444999994440000000066666667766666667666666666666667766666677666666776666667
444999aaaa9994449999999999999999444999994449999999999444999994440000000066666667766666667666666666666667766666677666666776666667
444999aaaa9994449999999999999999444999994449999999999444999994440000000066666667766666667666666666666667766666677666666776666667
444999aaaa9994449999999944444444444999994444444499999444444444440000000066666667766666667666666666666667766666677666666776666667
444999aaaa999444aaaaaaaa44444444444999aa44444444aa999444444444440000000066666667766666667666666666666667766666677666666776666667
444999aaaa999444aaaaaaaa44444444444999aa44444444aa999444444444440000000077777777766666667777777777777777766666677777777777777777
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08800880088008800880088000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88888888888888888888888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
888888888898898888e88e8800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88888888899989888eee8e8800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
088888800898898008e88e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00888800008888000088880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00088000000880000008800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8ee000e8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8e888ee8000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
8ee88888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
88ee8888000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
088e8880000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00888800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00088000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
05050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
05555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0fffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0fffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00333000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
03333330000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00d0d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0dd0dd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000202020200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
3432323232323232323232323232323600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
302f3e3e3e3e3e3e3e3e3e3e3e3e2c3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
303c3f3f3f3f3f3f3f3f3f3f3f3f3b3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
303c3f3f3f3f3f3f3f3f3f3f3f3f3b3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
303c3f3f3f3f3f3f3f3f3f3f3f3f3b3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
303c3f3f3f3f3f3f3f3f3f3f3f3f3b3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
303c3f3f3f3f3f3f3f3f3f3f3f3f3b3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
303c3f3f3f3f3f3f3f3f3f3f3f3f3b3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
303c3f3f3f3f3f3f3f3f3f3f3f3f3b3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
303c3f3f3f3f3f3f3f3f3f3f3f3f3b3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
303c3f3f3f3f3f3f3f3f3f3f3f3f3b3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
303c3f3f3f3f3f3f3f3f3f3f3f3f3b3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
302e3d3d3d3d3d3d3d3d3d3d3d3d2d3100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3533333333333333333333333333333700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000003b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
